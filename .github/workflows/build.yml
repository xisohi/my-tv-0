name: MYTV

on:
  schedule:
    - cron: '0 5 * * *'  # 每天凌晨5点触发
  workflow_dispatch:
    inputs:
      rebuild:
        description: '忽略构建记录以重新构建'
        required: false
        type: boolean
      donotpublish:
        description: '构建后不提交发布新版'
        required: false
        type: boolean

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for new commits
        id: check_commits
        run: |
          if git rev-parse HEAD; then
            echo "Git repository is not empty."
          else
            echo "Git repository is empty. Exiting."
            exit 1
          fi

          latest_commit=$(git log -1 --format='%H')
          echo "Latest commit: $latest_commit"

          # 在手动触发时，github.event.before 不存在，因此使用一个默认值
          previous_run_commit=${{ github.event.before || '0000000000000000000000000000000000000000000' }}
          echo "Previous run commit: $previous_run_commit"

          if [[ "$latest_commit" == "$previous_run_commit" && "$rebuild" != "true" ]]; then
            echo "No new commits since last run or rebuild flag is not set. Exiting."
            exit 1
          else
            echo "New commits detected or rebuild flag is set. Continuing build process."
          fi
        shell: bash

      - name: Set up JDK 21
        if: success()
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Get History
        if: success()
        id: get_history
        run: |
          chmod +x history.sh
          output=$(./history.sh)
          echo "$output" > history.md

      - name: Create Release
        if: success() && github.event_name != 'workflow_dispatch' && github.ref != 'refs/heads/main'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body_path: history.md

      - name: Run build with Gradle wrapper
        if: success()
        run: |
          ./gradlew clean
          ./gradlew assembleRelease -Pnet=common

      - name: Sign app APK
        if: success()
        id: sign_app
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/release
          alias: ${{ secrets.ALIAS }}
          signingKeyBase64: ${{ secrets.KEYSTORE }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ALIAS_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Set Asset Name
        if: success()
        id: set_asset_name
        run: |
          VERSION_WITHOUT_V=$(echo '${{ github.ref_name }}' | sed 's/^v//')
          echo "asset_name=my-tv-0.${VERSION_WITHOUT_V}.apk" >> $GITHUB_ENV

      - name: Upload Release Asset
        if: success()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.sign_app.outputs.signedReleaseFile }}
          asset_name: ${{ env.asset_name }}
          asset_content_type: application/vnd.android.package-archive

      - name: Run build with Gradle wrapper mobile
        if: success()
        run: |
          ./gradlew clean
          ./gradlew assembleRelease -Pnet=mobile

      - name: Sign app APK mobile
        if: success()
        id: sign_app_mobile
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/release
          alias: ${{ secrets.ALIAS }}
          signingKeyBase64: ${{ secrets.KEYSTORE }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ALIAS_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Set Asset Name mobile
        if: success()
        id: set_asset_name_mobile
        run: |
          VERSION_WITHOUT_V=$(echo '${{ github.ref_name }}' | sed 's/^v//')
          echo "asset_name=my-tv-0.${VERSION_WITHOUT_V}.china-mobile.apk" >> $GITHUB_ENV

      - name: Upload Release Asset mobile
        if: success()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.sign_app_mobile.outputs.signedReleaseFile }}
          asset_name: ${{ env.asset_name }}
          asset_content_type: application/vnd.android.package-archive

      - name: Run build with Gradle wrapper ipv6
        if: success()
        run: |
          ./gradlew clean
          ./gradlew assembleRelease -Pnet=ipv6

      - name: Sign app APK ipv6
        if: success()
        id: sign_app_ipv6
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/release
          alias: ${{ secrets.ALIAS }}
          signingKeyBase64: ${{ secrets.KEYSTORE }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ALIAS_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Set Asset Name ipv6
        if: success()
        id: set_asset_name_ipv6
        run: |
          VERSION_WITHOUT_V=$(echo '${{ github.ref_name }}' | sed 's/^v//')
          echo "asset_name=my-tv-0.${VERSION_WITHOUT_V}.ipv6.apk" >> $GITHUB_ENV

      - name: Upload Release Asset ipv6
        if: success()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.sign_app_ipv6.outputs.signedReleaseFile }}
          asset_name: ${{ env.asset_name }}
          asset_content_type: application/vnd.android.package-archive